@page "/ViewCard/{multiverseid}"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Newtonsoft.Json
@using System.Runtime.Serialization.Json
@using System.Text.Json.Serialization
@using Models;
@inject HttpClient client

<div class="container">
    <div class="row">
        <div class="offset-4 col-md-4" style="text-align:center">
        @if(card == null)
        {
            <p>Loading..</p>
        }
        else
        {
            
                <h3>@card.Card.name</h3>
                @if (card.Card.imageUrl == null)
               {
                   <img src="/img/olwr8sjm.bmp" height="500" width="350">
               }
                <img src="@card.Card.imageUrl" height="500" width="350"/>
                <h5>@card.Card.text</h5>
            
        }
        </div>
    </div>
</div>





@code {

    [Parameter]
    public string? multiverseid { get; set; }

    private Root? card;

    protected override async Task OnInitializedAsync()
    {
        await GetCard(@multiverseid);
    }

    private async Task<Root> GetCard(string multiverseid)
    {
        using HttpClient client = new()
        {
          BaseAddress = new Uri("https://api.magicthegathering.io/v1/")

        };

        var level = await client.GetAsync($"https://api.magicthegathering.io/v1/cards/{multiverseid}");
        var json = await level.Content.ReadAsStringAsync();


        Console.WriteLine(multiverseid);

        //string response = await client.GetStringAsync($"cards/{multiverseid}");

        //card = await client.GetFromJsonAsync<Card>($"cards/{multiverseid}");
        card = JsonConvert.DeserializeObject<Root>(json);

        Console.WriteLine(card.Card.name);

        if (card == null)
        {
            return card = new Root();
        }
        else
        {
           return card; 
        }
        
    }



}
